/*
 * This file is generated by jOOQ.
 */
package jooq_generated.tables.records


import jooq_generated.tables.TestTable

import org.jooq.Field
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
class TestTableRecord() : TableRecordImpl<TestTableRecord>(TestTable.TEST_TABLE), Record3<String?, String?, Int?> {

    var test1: String?
        set(value) = set(0, value)
        get() = get(0) as String?

    var test2: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    var test3: Int?
        set(value) = set(2, value)
        get() = get(2) as Int?

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<String?, String?, Int?> = super.fieldsRow() as Row3<String?, String?, Int?>
    override fun valuesRow(): Row3<String?, String?, Int?> = super.valuesRow() as Row3<String?, String?, Int?>
    override fun field1(): Field<String?> = TestTable.TEST_TABLE.TEST1
    override fun field2(): Field<String?> = TestTable.TEST_TABLE.TEST2
    override fun field3(): Field<Int?> = TestTable.TEST_TABLE.TEST3
    override fun component1(): String? = test1
    override fun component2(): String? = test2
    override fun component3(): Int? = test3
    override fun value1(): String? = test1
    override fun value2(): String? = test2
    override fun value3(): Int? = test3

    override fun value1(value: String?): TestTableRecord {
        this.test1 = value
        return this
    }

    override fun value2(value: String?): TestTableRecord {
        this.test2 = value
        return this
    }

    override fun value3(value: Int?): TestTableRecord {
        this.test3 = value
        return this
    }

    override fun values(value1: String?, value2: String?, value3: Int?): TestTableRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised TestTableRecord
     */
    constructor(test1: String? = null, test2: String? = null, test3: Int? = null): this() {
        this.test1 = test1
        this.test2 = test2
        this.test3 = test3
    }
}
