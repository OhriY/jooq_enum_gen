/*
 * This file is generated by jOOQ.
 */
package jooq_generated.tables


import jooq_generated.Public
import jooq_generated.tables.records.TestTableRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
class TestTable(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, TestTableRecord>?,
    aliased: Table<TestTableRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<TestTableRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.test_table</code>
         */
        val TEST_TABLE = TestTable()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TestTableRecord> = TestTableRecord::class.java

    /**
     * The column <code>public.test_table.test1</code>.
     */
    val TEST1: TableField<TestTableRecord, String?> = createField(DSL.name("test1"), SQLDataType.VARCHAR(20), this, "")

    /**
     * The column <code>public.test_table.test2</code>.
     */
    val TEST2: TableField<TestTableRecord, String?> = createField(DSL.name("test2"), SQLDataType.VARCHAR(100), this, "")

    /**
     * The column <code>public.test_table.test3</code>.
     */
    val TEST3: TableField<TestTableRecord, Int?> = createField(DSL.name("test3"), SQLDataType.INTEGER, this, "")

    private constructor(alias: Name, aliased: Table<TestTableRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<TestTableRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.test_table</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.test_table</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.test_table</code> table reference
     */
    constructor(): this(DSL.name("test_table"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, TestTableRecord>): this(Internal.createPathAlias(child, key), child, key, TEST_TABLE, null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun `as`(alias: String): TestTable = TestTable(DSL.name(alias), this)
    override fun `as`(alias: Name): TestTable = TestTable(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): TestTable = TestTable(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): TestTable = TestTable(name, null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<String?, String?, Int?> = super.fieldsRow() as Row3<String?, String?, Int?>
}
